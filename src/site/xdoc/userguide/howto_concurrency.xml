<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document>

 <properties>
  <title>Configurations and Concurrent Access</title>
 </properties>

<body>
    <section name="Configurations and Concurrent Access">
    <p>
      Configuration objects are often central resources of an application and
      are accessed by multiple components. If multiple threads are involved
      which read or even update configuration data, care has to be taken that
      access to a Configuration object is properly synchronized to avoid data
      corruption or spurious exceptions. This section of the user's guide deals
      with concurrency and describes the actions necessary to make a
      Configuration work in a multi-threaded environment.
    </p>

    <subsection name="Synchronizers">
    <p>
      Whether a Configuration object has to be thread-safe or not strongly
      depends on a concrete use case. For an application which only reads
      some configuration properties in its <code>main()</code> method at
      startup, it does not matter whether this configuration can safely be
      accessed from multiple threads. In this case, the overhead of synchronizing
      access to the configuration is not needed, and thus operations on the
      <code>Configuration</code> object can be more efficient. On the other
      hand, if the Configuration object is accessed by multiple components
      running in different threads it should better be thread-safe.
    </p>
    <p>
      To support these different use cases, Commons Configuration takes a
      similar approach as the Java Collections framework. Here collections are
      per default not thread-safe (and thus more efficient). If an application
      needs a thread-safe collection, it can &quot;upgrade&quot; an existing
      one by calling a method of the <code>Collections</code> class.
    </p>
    <p>
      Objects implementing the <code>Configuration</code> interface can be
      associated with a
      <code><a href="../apidocs/org/apache/commons/configuration2/sync/Synchronizer.html">
      Synchronizer</a></code> object. This synchronizer is triggered on each
      access to the configuration (distinguishing between read and write
      access). It can decide whether access is allowed or block the calling
      thread until it is safe to continue. Per default, a Configuration object
      uses a <code><a href="../apidocs/org/apache/commons/configuration2/sync/NoOpSynchronizer.html">
      NoOpSynchronizer</a></code> instance. As the name implies, this class does
      nothing to protect its associated configuration against concurrent
      access; its methods are just empty dummies. It is appropriate for use
      cases in which a configuration is only accessed by a single thread.
    </p>
    <p>
      If multiple threads are involved, Configuration objects have to be
      thread-safe. For this purpose, there is another implementation of
      <code>Synchronizer</code>:
      <code><a href="../apidocs/org/apache/commons/configuration2/sync/ReadWriteSynchronizer.html">
      ReadWriteSynchronizer</a></code>. This class is based on the
      <code>ReentrantReadWriteLock</code> class from the JDK. It implements
      the typical behavior desired when accessing a configuration in a
      multi-threaded environment:
      <ul>
        <li>An arbitrary number of threads can read the configuration
        simultaneously.</li>
        <li>Updates of a configuration can only happen with an exclusive lock;
        so if a thread changes configuration data, all other threads (readers
        and writers) are blocked until the update operation is complete.</li>
      </ul>
    </p>
    <p>
      The synchronizer associated with a Configuration can be changed at any
      time by calling the <code>setSynchronizer()</code> method. The following
      example shows how this method is used to make a <code>Configuration</code>
      instance thread-safe:
    </p>
    <source><![CDATA[
config.setSynchronizer(new ReadWriteSynchronizer());
]]></source>
    <p>
      Rather than setting the synchronizer on an existing
      <code>Configuration</code> instance, it is usually better to configure
      the <a href="howto_builder.html">configuration builder</a> responsible
      for the creation of the configuration to set the correct synchronizer
      directly after a new instance has been created. This is done in the usual
      way by setting the corresponding property of a parameters object passed
      to the builder's <code>configure()</code> method, for instance:
    </p>
<source><![CDATA[
Parameters params = new Parameters();
BasicConfigurationBuilder<PropertiesConfiguration> builder =
        new BasicConfigurationBuilder<PropertiesConfiguration>(
                PropertiesConfiguration.class)
                .configure(params.basic()
                        .setSynchronizer(new ReadWriteSynchronizer());
PropertiesConfiguration config = builder.getConfiguration();
]]></source>
    <p>
      It is also possible to set the synchronizer to <strong>null</strong>. In
      this case, the default <code>NoOpSynchronizer</code> is installed, which
      means that the configuration is no longer protected against concurrent
      access.
    </p>
    <p>
      With the two classes <code>NoOpSynchronizer</code> and
      <code>ReadWriteSynchronizer</code> the Commons Configuration library
      covers the basic use cases of no protection and full protection of
      multi-threaded access. As the <code>Synchronizer</code> interface is
      pretty simple, applications are free to provide their own implementations
      according to their specific needs. However, this requires a certain
      understanding of internal mechanisms in Configuration implementations.
      Some caveats are provided in the remaining of this chapter.
    </p>
    </subsection>

    <subsection name="Basic operations and thread-safety">
    <p>
      <code><a href="../apidocs/org/apache/commons/configuration2/AbstractConfiguration.html">
      AbstractConfiguration</a></code> already provides a major part of the
      implementation of correctly interacting with a <code>Synchronizer</code>
      object. Methods for reading configuration data (such as
      <code>getProperty()</code>, <code>isEmpty()</code>, or
      <code>getKeys()</code>) and for changing properties (e.g.
      <code>setProperty()</code>, <code>addProperty()</code>, or
      <code>clearProperty()</code>) already call the correct methods of the
      <code>Synchronizer</code>. These methods are declared <strong>final</strong>
      to avoid that subclasses accidently break thread-safety by incorrectly
      usage of the <code>Synchronizer</code>.
    </p>
    <p>
      Classes derived from <code>AbstractConfiguration</code> sometimes offer
      specific methods for accessing properties. For instance, hierarchical
      configurations offer operations on whole subtrees, or
      <code><a href="../apidocs/org/apache/commons/configuration2/INIConfiguration.html">
      INIConfiguration</a></code> allows querying specific sections. These
      methods are also aware of the associated <code>Synchronizer</code> and
      invoke it correctly.
    </p>
    <p>
      There is another pair of methods available for each <code>Configuration</code>
      object allowing direct control over the <code>Synchronizer</code>:
      <code>lock()</code> and <code>unlock()</code>. Both methods expect an
      argument of type
      <code><a href="../apidocs/org/apache/commons/configuration2/sync/LockMode.html">
      LockMode</a></code> which tells them whether the configuration is to be
      locked for read or write access. These methods can be used to extend the
      locking behavior of standard methods. For instance, if multiple properties
      are to be added in an atomic way, <code>lock()</code> can be called first,
      then all properties are added, and finally <code>unlock()</code> is called.
      Provided that a corresponding <code>Synchronizer</code> implementation is
      used, other threads will not interfere with this sequence. Note that it is
      important to always call <code>unlock()</code> after a <code>lock()</code>
      call; this is done best in a <strong>finally</strong> block as shown in
      the following example:
    </p>
    <source><![CDATA[
config.lock(LockMode.WRITE);
try
{
    config.addProperty("prop1", "value1");
    ...
    config.addProperty("prop_n", "value_n");
}
finally
{
    config.unlock(LockMode.WRITE);
}
]]></source>
    <p>
      So, in a nutshell: When accessing configuration data from standard
      configuration classes all operations are controlled via the
      configuration's <code>Synchronizer</code> object. Client code is only
      responsible for setting a correct <code>Synchronizer</code> object
      which is suitable for the intended use case.
    </p>
    </subsection>

    <subsection name="Other flags">
    <p>
      In addition to the actual configuration data, each <code>Configuration</code>
      object has some flags controlling its behavior. One example for such a
      flag is the boolean <code>throwExceptionOnMissing</code> property. Other
      helper objects like the object responsible for interpolation or the
      expression engine for hierarchical configurations fall into the same
      category. The manipulation of those flags and helper objects is also
      related to thread-safety.
    </p>
    <p>
      In contrast to configuration data, access to flags is <strong>not</strong>
      guarded by the <code>Synchronizer</code>. This means that when changing a
      flag in a multi-threaded environment, there is no guarantee that this
      change is visible to other threads.
    </p>
    <p>
      The reason for this design is that the preferred way to create a
      <code>Configuration</code> object is using a <em>configuration builder</em>.
      The builder is responsible for fully initializing the configuration;
      afterwards, no behavioral changes should be performed any more. Because
      builders are always synchronized the values of all flags are safely
      published to all involved threads.
    </p>
    <p>
      If there really is the need to change a flag later on in the life-cycle
      of a <code>Configuration</code> object, the <code>lock()</code> and
      <code>unlock()</code> methods described in the previous section should be
      used to do the change with a write lock held.
    </p>
    </subsection>

    <subsection name="Special cases">
    <p>
      Thread-safety is certainly a complex topic. This section describes some
      corner cases which may occur when some of the more advanced configuration
      classes are involved.
    </p>
    <p>
      <ul>
        <li>All hierarchical configurations derived from
        <code><a href="../apidocs/org/apache/commons/configuration2/BaseHierarchicalConfiguration.html">
        BaseHierarchicalConfiguration</a></code> internally operate on a nodes
        structure implemented by immutable nodes. This is beneficial for
        concurrent access. It is even possible to share (sub) trees of
        configuration nodes between multiple configuration objects.
        Updates of these structures are implemented in a thread-safe and
        non-blocking way - even when using the default <code>NoOpSynchronizer</code>.
        So the point to take is that when using hierarchical configurations
        it is not required to set a special synchronizer because safe
        concurrent access is already a basic feature of these classes.
        The only exception is that change events caused by updates of a
        configuration's data are not guaranteed to be delivered in a
        specific order. For instance, if one thread clears a configuration
        and immediately afterwards another thread adds a property, it may be
        the case that the clear event arrives after the add property event at
        an event listener. If the listener relies on the fact that the
        configuration is empty now, it may be up for a surprise. In cases in
        which the sequence of generated configuration events is important, a
        fully functional synchronizer object should be set.</li>
        <li><code><a href="../apidocs/org/apache/commons/configuration2/CombinedConfiguration.html">
        CombinedConfiguration</a></code> is a bit special regarding lock
        handling. Although derived from <code>BaseHierarchicalConfiguration</code>,
        this class is not thread-safe per default. So if accessed by multiple
        threads, a suitable synchronizer has to be set.
        An instance manages a node tree which is constructed
        dynamically from the nodes of all contained configurations using the
        current <em>node combiner</em>. When one of the child configurations is
        changed the node tree is reset so that it has to be re-constructed on
        next access. Because this operation changes the configuration's internal
        state it is performed with a write lock held. So even if only data is
        read from a <code>CombinedConfiguration</code>, it may be the case that
        temporarily a write lock is obtained for constructing the combined node
        tree. Note that the synchronizers used for the children of a combined
        configuration are independent. For instance, if configuration objects
        derived from <code>BaseHierarchicalConfiguration</code> are added as
        children to a <code>CombinedConfiguration</code>, they can continue
        using a <code>NoOpSynchronizer</code>.</li>
        <li>Derived from <code>CombinedConfiguration</code> is
        <code><a href="../apidocs/org/apache/commons/configuration2/DynamicCombinedConfiguration.html">
        DynamicCombinedConfiguration</a></code> which extends its base class by
        the ability to manage multiple combined configuration instances. The
        current instance is selected based on a key constructed by a
        <code><a href="../apidocs/org/apache/commons/configuration2/interpol/ConfigurationInterpolator.html">
        ConfigurationInterpolator</a></code> instance. If this yields a key
        which has not been encountered before, a new <code>CombinedConfiguration</code>
        object is created. Here again it turns out that even a read access to a
        <code>DynamicCombinedConfiguration</code> may cause internal state
        changes which require a write lock to be held. When creating a new
        child combined configuration it is passed the <code>Synchronizer</code>
        of the owning <code>DynamicCombinedConfiguration</code>; so there is
        actually only a single <code>Synchronizer</code> controlling the
        access to all involved configurations.</li>
      </ul>
    </p>
    </subsection>

    <subsection name="Read-only configurations">
    <p>
      Objects that are not changed typically play well in an environment with
      multiple threads - provided that they are initialized in a safe way.
      For the safe initialization of <code>Configuration</code> objects
      specialized <a href="howto_builders.html">builders</a> are responsible. These are classes derived from
      <code><a href="../apidocs/org/apache/commons/configuration2/builder/BasicConfigurationBuilder.html">
      BasicConfigurationBuilder</a></code>. Configuration builders are designed
      to be thread-safe: their <code>getConfiguration()</code> method is
      synchronized, so that configurations can be created and initialized in a
      safe way even if multiple threads are interacting with the builder.
      Synchronization also ensures that all values stored in member fields of
      newly created <code>Configuration</code> objects are safely published to
      all involved threads.
    </p>
    <p>
      As long as a configuration returned freshly from a builder is not changed
      in any way, it can be used without a special <code>Synchronizer</code>
      (this means that the default <code>NoOpSynchronizer</code> is used).
      As was discussed in the previous section, there are special cases in which
      read-only access to <code>Configuration</code> objects causes internal
      state changes. This would be critical without a fully functional
      <code>Synchronizer</code> object. However, the builders dealing with
      affected classes are implemented in a way that they take care about these
      special cases and perform extra initialization steps which make write
      locks for later read operations unnecessary.
    </p>
    <p>
      For instance, the builder for combined configurations explicitly accesses
      a newly created <code>CombinedConfiguration</code> object so that it is
      forced to construct its node tree. This happens in the builder's
      <code>getConfiguration()</code> method which is synchronized. So provided
      that the combined configuration is not changed (no other child
      configurations are added, no updates are performed on existing child
      configurations), no protection against concurrent access is needed - a
      simple <code>NoOpSynchronizer</code> can do the job.
    </p>
    <p>
      Situation is similar for the other special cases described in the previous
      section. One exception is <code>DynamicCombinedConfiguration</code>:
      Whether an instance can be used in a read-only manner without a fully
      functional <code>Synchronizer</code> depends on the way it constructs its
      keys. If the keys remain constant during the life time of an instance
      (for instance, they are based on a system property specified as startup
      option of the Java virtual machine), <code>NoOpSynchronizer</code> is
      sufficient. If the keys are more dynamic, a fully functional
      <code>Synchronizer</code> is required for concurrent access - even if only
      reads are performed.
    </p>
    <p>
      So to sum up, except for very few cases configurations can be read by
      multiple threads without having to use a special <code>Synchronizer</code>.
      For this to be safe, the configurations have to be created through a
      builder, and they must not be updated by any of these threads. A good way
      to prevent updates to a <code>Configuration</code> object is to wrap it
      by an immutable configuration.
    </p>
    </subsection>
  </section>
</body>

</document>